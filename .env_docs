# Social Media Platform Support

Sava now supports bookmarking from major social media platforms, even without full scraping functionality yet.

## Supported Platforms

| Platform | Icon | Status | Metadata Extraction |
|----------|------|--------|-------------------|
| YouTube | üì∫ | ‚úÖ Full scraping | Video details, thumbnails, metadata |
| TikTok | üéµ | ‚úÖ Basic support | Username, video ID from URL |
| Instagram | üì∏ | ‚úÖ Basic support | Post/reel/story ID, username |
| Twitter/X | üê¶ | ‚úÖ Basic support | Username, tweet ID |
| LinkedIn | üíº | ‚úÖ Basic support | Username, post type |
| Reddit | ü§ñ | ‚úÖ Basic support | Subreddit, post ID |
| Pinterest | üìå | ‚úÖ Basic support | Pin ID |
| Snapchat | üëª | ‚úÖ Basic support | Username, content type |
| Facebook | üë• | ‚úÖ Basic support | Username, post type |

## What Works Now

### Backend (API)
- ‚úÖ Platform detection from URLs
- ‚úÖ Basic metadata extraction (usernames, IDs, content types)
- ‚úÖ Database storage with platform categorization
- ‚úÖ API endpoints support all platforms
- ‚úÖ Extensible ingestor system for future scraping

### Frontend (Web UI)
- ‚úÖ Platform-specific icons and colors
- ‚úÖ Filter bookmarks by platform
- ‚úÖ Visual platform badges
- ‚úÖ Responsive design with platform styling

### URL Patterns Supported

#### TikTok
- `https://tiktok.com/@username/video/123456789`

#### Instagram  
- `https://instagram.com/p/ABC123/` (posts)
- `https://instagram.com/reel/ABC123/` (reels)
- `https://instagram.com/stories/username/123456789/` (stories)

#### Twitter/X
- `https://twitter.com/username/status/123456789`
- `https://x.com/username/status/123456789`

#### LinkedIn
- `https://linkedin.com/posts/username_activity-123-abc`
- `https://linkedin.com/feed/update/urn:li:activity:123456789`

#### Reddit
- `https://reddit.com/r/subreddit/comments/abc123/title/`
- `https://old.reddit.com/r/subreddit/comments/abc123/title/`

#### Pinterest
- `https://pinterest.com/pin/123456789/`
- `https://pin.it/shortlink123`

#### Snapchat
- `https://snapchat.com/add/username`
- `https://snapchat.com/discover/story/username`

#### Facebook
- `https://facebook.com/username/posts/123456789`
- `https://facebook.com/photo.php?fbid=123456789`
- `https://fb.com/username/posts/123456789`

## How It Works

1. **URL Detection**: When a URL is submitted, the system detects the platform using domain patterns
2. **Ingestor Selection**: The appropriate platform ingestor is selected
3. **Metadata Extraction**: Basic information is extracted from the URL structure
4. **Database Storage**: The bookmark is stored with platform-specific categorization
5. **UI Display**: The frontend displays the bookmark with appropriate icons and styling

## Future Enhancements

### Ready for Full Scraping
The infrastructure is in place to add full scraping capabilities:
- Each platform has its own ingestor class
- Metadata extraction methods are ready for enhancement
- Database schema supports rich metadata storage

### Potential Additions
- Content thumbnails extraction
- Full text/description scraping
- View counts, like counts, etc.
- Comments extraction
- Author profile information

## Technical Details

### Database Schema
The `bookmarks` table includes a platform constraint that supports all new platforms:
```sql
CONSTRAINT check_platform_values CHECK (
    platform IN ('youtube','tiktok','instagram','twitter','linkedin','reddit','pinterest','snapchat','facebook','other')
)
```

### API Endpoints
- `POST /bookmarks` - Create bookmark (auto-detects platform)
- `GET /api/bookmarks?platform=<platform>` - Filter by platform
- All existing endpoints work with new platforms

### Frontend Components
- `PlatformIcon` component with all platform icons
- `PlatformFilterButton` with platform-specific styling
- Badge components with proper color mapping

## Usage Examples

```bash
# Add bookmarks via API
curl -X POST "http://localhost:8000/bookmarks" \
  -H "Content-Type: application/json" \
  -H "Authorization: Bearer <token>" \
  -d '{"url": "https://tiktok.com/@user/video/123456789"}'

# Filter bookmarks by platform
curl "http://localhost:8000/api/bookmarks?platform=tiktok" \
  -H "Authorization: Bearer <token>"
```

## Testing

Run the demo script to see platform detection in action:
```bash
cd api
python3 demo_new_platforms.py
```

This will show how the system detects and handles URLs from all supported platforms. 